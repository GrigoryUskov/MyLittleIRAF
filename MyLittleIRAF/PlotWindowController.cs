// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Collections.Generic;

using OxyPlot;
using OxyPlot.Axes;
using OxyPlot.Series;

using OxyPlot.Xamarin.Mac;

using Foundation;
using AppKit;
using CoreGraphics;


namespace MyLittleIRAF
{
	public partial class PlotWindowController : NSViewController
	{
        private NSViewController _presentor;

        public NSViewController Presentor
        {
            get
            {
                return _presentor;
            }
            set
            {
                _presentor = value;
            }
        }

        private List<Spectrum> _listOfSpectra = new List<Spectrum>();


        public List<Spectrum> ListOfSpectra
        {
            get { return _listOfSpectra; }
            set {_listOfSpectra = value; }
        }



        public PlotWindowController (IntPtr handle) : base (handle)
		{

		}


        partial void AcceptButton(NSObject sender)
        {
            RaiseDialogAccepted();
            CloseDialog();

        }
        partial void CancelButton(NSObject sender)
        {
            RaiseDialogCanceled();
            CloseDialog();

        }

        public override void ViewWillAppear()
        {
            base.ViewWillAppear();

            //var frame = new CGRect(100, 20, 1000, 1000);
            //var plotView = new PlotView(frame);
            //var model = new PlotModel { Title = "Title" };
            //model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom });
            //model.Axes.Add(new LinearAxis { Position = AxisPosition.Left });

            //List<LineSeries> listPointArray = new List<LineSeries>();
            //LineSeries linePoints = new LineSeries()
            //{
            //    StrokeThickness = 1,
            //    MarkerSize = 1,
            //    Color = OxyColor.FromRgb(0, 0, 0),
            //};

            //for (int i = 0; i < 3; i++)
            //{
            //    linePoints.Points.Add(new DataPoint((double) i, Math.Pow((double) i,2)));
            //}
            //listPointArray.Add(linePoints);

            //linePoints = new LineSeries()
            //{
            //    StrokeThickness = 1,
            //    MarkerSize = 1,
            //    Color = OxyColor.FromRgb(0, 0, 0),
            //};
            //for (int i = 0; i < 3; i++)
            //{
            //    linePoints.Points.Add(new DataPoint((double)i, Math.Pow((double)i, 4)));
            //}
            //listPointArray.Add(linePoints);

            //foreach (var series in listPointArray)
            //{
            //    model.Series.Add(series);
            //}

            //plotView.Model = model;
            //View.AddSubview(plotView);


            if (ListOfSpectra.Count != 0)
            {

                var frame = new CGRect(0, 40, 2000, 2000);
                var plotView = new PlotView(frame);
                var model = new PlotModel { Title = "Spectrum" };
                model.Axes.Add(new LinearAxis { Position = AxisPosition.Bottom });
                model.Axes.Add(new LinearAxis { Position = AxisPosition.Left });


                //List<LineSeries> listPointArray = new List<LineSeries>();
                LineSeries linePoints = new LineSeries()
                { 
                StrokeThickness = 1, 
                MarkerSize = 1, 
                Color = OxyColor.FromRgb(0, 0, 0), 
                };

                //modelSeries.Line
                for (int i = 0; i < ListOfSpectra.Count; i++)
                {
                    double[] x = ListOfSpectra[i].XX;
                    double[] y = ListOfSpectra[i].YY;

                    for (int j = 0; j < x.Length; j++)
                    {

                        linePoints.Points.Add(new DataPoint(x[j], y[j]));
                    }
                    model.Series.Add(linePoints);
                    linePoints = new LineSeries()
                    {
                        StrokeThickness = 1,
                        MarkerSize = 1,
                        Color = OxyColor.FromRgb(0, 0, 0),
                    };
                }



                plotView.Model = model;

                View.AddSubview(plotView);
            }


        }
        public override void ViewDidAppear()
        {
            base.ViewDidAppear();


        }


        private void CloseDialog()
        {
            Presentor.DismissViewController(this);
        }

        public EventHandler DialogAccepted;

        internal void RaiseDialogAccepted()
        {
            if (this.DialogAccepted != null)
                this.DialogAccepted(this, EventArgs.Empty);
        }

        public EventHandler DialogCanceled;

        internal void RaiseDialogCanceled()
        {
            if (this.DialogCanceled != null)
                this.DialogCanceled(this, EventArgs.Empty);
        }
    }
}
